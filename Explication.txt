                                                        Étape de création du projet:
1. Il faut crée deux folders. (Client et serveur)
2. Ensuite on ce dirige dans le backend et on fait l'installation:
        1. npm init
        2. npm install express
        3. npm install cors
        4. npm install mysql2
        5. npm install nodemon. Dans le script ( "start":"nodemon index.js")  
        6. npm install sequelize sequelize-cli 
        7. npm install npm install -g sequelize sequelize-cli
        8. sequelize init (Delete migration et seeders (inutile))
        9. npm install cors (./server/index.js: ligne 4 et ligne 7)
3. Pour generer une table dans mysql2
        1.création de la table dans server/models/"Nom de la table" (Regarder le fichier "Questions.js")
        2. Lors que la création été fait, il faut importer le fichier "models". Ça vas vérifier si les tables son deja ajouter dans la base de donné.
        Si non, elle ce font ajouter a la base de donné qui a été entré dans le fichier config/config.json

4. Ensuite la création des deux méthodes POST et GET dans le fichier ./routes/Questions.js
5. Ensuite dans le Frontend pour afficher les questions qui ce trouve dans la base de donné
        1. npx create-react-app .
        2. npm install axios

6. Pour commencer a utiliser plusieur route pour notre application (toujours dans le folder client)
        1. npm install react-router-dom
        2. Dans src, crée un folder qui ce nomme: pages (folder qui vascontenir toute les routes de l'application)
        Information trouver sur internet: Few updates; 'Switch' is now 'Routes' in v6. ,
        also no longer require 'exact' , and component in Route is now 'element={<Home/>}' for example

7. Pour la page création d'une question
        1. npm install formik (client)
        (Formik est une bibliothèque React simplifiant la gestion des formulaires en facilitant la gestion de l'état,
        de la validation et de la soumission des données.)
        2. npm install yup (pour la validation des inputs)

8. Lorsqu'un utilisateur click sur une question
        1. Crée une nouvelle page qui vas ce nommer question
        2. Fair un import de useParams
        3. Il faut faire l'utilisation de {useNavigate} et cree une varaible navigate voir la ligne 11 de la page Accueil.js
        4. Ensuite l'utiliser dans le onClick en utilisant le id. Voir ligne 25 de Accueil.js
        5. Ensuite dans la page question il faut utiliser {useEffect} pour pouvoir afficher les information derictement lorsque l'app roule
        6. Et il faut utiliser axios pour pouvoir prendre les information d'une seul question
        7. Il y a un changement a faire dans la base de donné

9. Création de la base de donné pour les reponse au question
        1. Il faut crée un nouveau modele dans la base de donné (Reponse)
        2.Ensuite cette table vas ce crée dans la base de donné mysql
        PS: Il faut comprendre qu'il peut avoir plusieur reponse a une question. 
        3. Dans le models "Questions" il faut cree une fonction qui vas dire que notre question a plusieur reponse. Voir ligne 31
        4. Ensuite une nouvelle table va etre crée dans la base de donnée
        5. Dans index il faut crée la routes reponses. Voir lingne 14 dans index
        6. Ensuite on vas cree les routes les reponses

10. Création de l'interface pour l'ajout des reponses à une question
        1. Creation de l'input pour ecrire la reponse et creation du boutton
        2. Ensuite on utilise axios pour get tout les reponses repondu grace au id
        3. "L'ajout de id dans le tableau de dépendances de useEffect garantit que les requêtes Axios sont relancées 
        chaque fois que l'identifiant change. Cela est crucial dans les applications à page unique (SPA) où les composants sont réutilisés." Voir ligne 19 "Question.js"
        4. Cree un nouveau useState "reponseQuestion" qui vas permettre de mettre tout les reponses au question dans le tableau. Ensuite on affiche avec un boucle (map)
        5. Ensuite pour ajouter une reponse, on crée une methode on click qui vas envoyer la reponse dans la base de donné avec le id de la question
        
        

