                                                        Étape de création du projet:
1. Il faut crée deux folders. (Client et serveur)
2. Ensuite on ce dirige dans le backend et on fait l'installation:
        1. npm init
        2. npm install express
        3. npm install cors
        4. npm install mysql2
        5. npm install nodemon. Dans le script ( "start":"nodemon index.js")  
        6. npm install sequelize sequelize-cli 
        7. npm install npm install -g sequelize sequelize-cli
        8. sequelize init (Delete migration et seeders (inutile))
        9. npm install cors (./server/index.js: ligne 4 et ligne 7)
3. Pour generer une table dans mysql2
        1.création de la table dans server/models/"Nom de la table" (Regarder le fichier "Questions.js")
        2. Lors que la création été fait, il faut importer le fichier "models". Ça vas vérifier si les tables son deja ajouter dans la base de donné.
        Si non, elle ce font ajouter a la base de donné qui a été entré dans le fichier config/config.json

4. Ensuite la création des deux méthodes POST et GET dans le fichier ./routes/Questions.js
5. Ensuite dans le Frontend pour afficher les questions qui ce trouve dans la base de donné
        1. npx create-react-app .
        2. npm install axios

6. Pour commencer a utiliser plusieur route pour notre application (toujours dans le folder client)
        1. npm install react-router-dom
        2. Dans src, crée un folder qui ce nomme: pages (folder qui vascontenir toute les routes de l'application)
        Information trouver sur internet: Few updates; 'Switch' is now 'Routes' in v6. ,
        also no longer require 'exact' , and component in Route is now 'element={<Home/>}' for example

7. Pour la page création d'une question
        1. npm install formik (client)
        (Formik est une bibliothèque React simplifiant la gestion des formulaires en facilitant la gestion de l'état,
        de la validation et de la soumission des données.)
        2. npm install yup (pour la validation des inputs)

8. Lorsqu'un utilisateur click sur une question
        1. Crée une nouvelle page qui vas ce nommer question
        2. Fair un import de useParams
        3. Il faut faire l'utilisation de {useNavigate} et cree une varaible navigate voir la ligne 11 de la page Accueil.js
        4. Ensuite l'utiliser dans le onClick en utilisant le id. Voir ligne 25 de Accueil.js
        5. Ensuite dans la page question il faut utiliser {useEffect} pour pouvoir afficher les information derictement lorsque l'app roule
        6. Et il faut utiliser axios pour pouvoir prendre les information d'une seul question
        7. Il y a un changement a faire dans la base de donné

9. Création de la base de donné pour les reponse au question
        1. Il faut crée un nouveau modele dans la base de donné (Reponse)
        2.Ensuite cette table vas ce crée dans la base de donné mysql
        PS: Il faut comprendre qu'il peut avoir plusieur reponse a une question. 
        3. Dans le models "Questions" il faut cree une fonction qui vas dire que notre question a plusieur reponse. Voir ligne 31
        4. Ensuite une nouvelle table va etre crée dans la base de donnée
        5. Dans index il faut crée la routes reponses. Voir lingne 14 dans index
        6. Ensuite on vas cree les routes les reponses

10. Création de l'interface pour l'ajout des reponses à une question
        1. Creation de l'input pour ecrire la reponse et creation du boutton
        2. Ensuite on utilise axios pour get tout les reponses repondu grace au id
        3. "L'ajout de id dans le tableau de dépendances de useEffect garantit que les requêtes Axios sont relancées 
        chaque fois que l'identifiant change. Cela est crucial dans les applications à page unique (SPA) où les composants sont réutilisés." Voir ligne 19 "Question.js"
        4. Cree un nouveau useState "reponseQuestion" qui vas permettre de mettre tout les reponses au question dans le tableau. Ensuite on affiche avec un boucle (map)
        5. Ensuite pour ajouter une reponse, on crée une methode on click qui vas envoyer la reponse dans la base de donné avec le id de la question

11. Création d'un systeme login et register
        1. Création d'un models Users,
        2. Création de la colonnes username et password dans le fichier "models/Users.js"
        3. Création de la route post pour le user
        4. Fair l'installation de la librairie "Bcrypt". Ce qui vas permettre de crypter les MDP
        4. Creation des route post
        5. Creation de la page inscription en utilisant Formik pour verifier la les donné qui vont etre enregistrer
        7. Creation de la page connexion

12. Systeme d'authentification
        1. À chaque fois qu'un utilisateur vas essayer de se connecter, on vas utiliser un tocken
        2. On fait l'installtion de : npm install jsonwebtoken. Ce qui va nous permettre de faire la genration du token lors de la connexion d'utilisateur
        3. Pour la generation du token, voir ligne 8 et 35 de: ./routes/Users.js
        4. on vas crée un token qui vas contenir comme données le nom d'utilisateur et le id
        5. Ensuite, il faut aller dans la page (./pages/Connecter.js), et dans la function de axios, on verifie si c'est pas une erreur,
        qui à été recus depuis le backend.
        6. Si c'est une erreur, on affiche celle-ci dans le frontend sinon un acces token vas etre crée.
        Pour le voir: click droit-> inspecter-> application-> storage-> sessionStorage-> http://localhost:3000
        7. La raison pour laquel nous avons besoin, c'est pour que seul les personnes qui sont connecter peuvent ecrire une reponse ou cree une question.
        8. Grace a la variable du acces token, qui sont le username et le id de la personne connecter, il vas etre possible pour nous de prendre le id lorsque
        l'utilisateur connecter lorsqu'il cree une question et sont username lorsqu'il donne un reponse.
        9. On vas crée un nouveau dossier (middlewares) dans server, pour ensuite crée un fichier un fichier: AuthMiddleware.js
        10. Dans ce dossier on vas crée un fonction pour vois si nous avons recu un token lors de la connexion de l'utilisateur.
        Si il n'est pas connecter, cela veut dire qu'on ne vas pas recevoir de token, donc on renvoie un message d'erreur.
        11. Dans (AuthMiddleware.js), nous devons importer verify
        12. Ensuite on vas crée un try,catch pour la validation de token
        13. Ensuite on vas prendre le token (./pages/Question.js)

13. Je vais faire en sorte que lorsque j'écris une reponse, je vais pouvoir mettre le nom de l'utilisateur qui a écris la reponse
        1. Dans le model de Question, on vas rejouter la colonnes username
        2. On vas rajouter a la methode validateToken. ligne 15 (AuthMiddleware.js)
        3. Ensuite dans le fichier (Reponse.js) on crée une constant username et on prend le username de l'utilisateur connecté
        grace a la ligne 18

14. Pour rajouter le nom d'utilisateur lorsqu'on ecris une reponse
        1.On vas dans le frontend (./client/src/pages/Question.js)
        2. Ensuite dans notre boucle ou on affiche le text de chaque reponse donné a la question,
        on vas avoir la possiblité d'utiliser "{valeur.username}
        3. Dans notre variable const "ajouterReponse" on vas rajouter, username:reponse.data.username

15. Maintenant je vais faire en sorte d'enlever l'affichage ("Se connecter/S'incrire") lorsqu'un user est connecté
        1. Cette ligne de code permet de savoir si il y a un token qui est utilisé dans l'application.
        Si oui on n'afficher pas les deux liens dans la bar de navigation.  "<AuthContext.Provider>" (App.js)
        2. Le probleme avec le sessionStorage, c'est que lorsque je ferme ma page, ca me deconnecte automatiquement.
        Donc c'est mieux d'utiliser LocalStorage, pour pouvoir garder notre connexion
            1.Pout changer notre item en LocalStorage on vas dans (./pages/Connecter) et on change la ligne 18 pour "LocalStorage"
            2. Maintenant, lorsqu'on rajoute un commentaire, on get l'item du LocalStorage et non de sessionStorage.
            Donc dans: ("./pages/Question.js") lorsque j'écris un commentaire et que je veux prend le username de la personne connecté,
            Je dois maintenant changer la ligne 37 et mettre LocalStorage. Il faut faire la meme chose dans ("App.js) ligne 20.

16. je fait face a un probleme. Lorsque je suis connecter, je dois rafraichir la page pour que les boutton se connecter et inscrire disparaisse
        1.Donc je vais crée un folder "helpers" avec le fichier "AuthContext.js"
        (Ceci est particulièrement utile pour partager des données globales comme l'authentification de l'utilisateur)
        2. On dois importer notre context dans le fichier qui est le parent de tout le projet. Dans notre cas "App.js"
        3. Ensuite on vas cree un useState qui vas nous permettre de savoir l'état de notre connexion
        AuthContext.Provider est un composant qui permet de passer authState et setAuthState à tous les composants enfants qui consomment ce contexte. 
        En d'autres termes, cela rend authState et setAuthState disponibles dans n'importe quel composant de l'arborescence des composants qui s'abonne au AuthContext.
        Comme ca, dans toute les pages, il vas etre possible de savoir si nous somme connecté ou non.
        4. Maintenant, pour afficher "Se connecter/S'incrire", j'ai juste a verifier l'état de connexion.
        5.Pour changer l'état de connexion, lorsqu'on clic sur ce connecter et que la connexion a fonctionner, il faut importer "UseContext" et "AuthContext"
        
        
            EXPLICATION DE LA LIGNE DE CODE 10 DANS "./PAGES/Connecter.js":
            useContext Hook de React :
            useContext est un Hook fourni par React qui permet à vos composants d'accéder aux valeurs d'un Context sans avoir à le passer explicitement à chaque niveau de l'arborescence des composants.
            Ici, useContext(AuthContext) signifie que vous utilisez le Hook useContext pour accéder aux valeurs fournies par AuthContext, le contexte que vous avez créé précédemment (probablement pour gérer l'état d'authentification dans l'ensemble de l'application).
            AuthContext :
            AuthContext est le contexte que vous avez importé. Ce contexte est supposé être configuré pour contenir les informations et les fonctions liées à l'authentification des utilisateurs.
            En enveloppant votre application (ou une partie de celle-ci) dans un AuthContext.Provider, vous avez la possibilité de définir des valeurs accessibles à tous les composants enfants qui utilisent ce contexte.
            Extraction de setAuthState à partir de AuthContext :
            { setAuthState } utilise la déstructuration pour extraire uniquement la fonction setAuthState du contexte. setAuthState est probablement une fonction qui vous permet de mettre à jour l'état d'authentification (par exemple, indiquer si un utilisateur est connecté ou non).
            Cela signifie que setAuthState est une fonction passée comme une partie de l'objet value du AuthContext.Provider dans un autre composant (probablement à un niveau plus élevé dans l'arborescence des composants).
            Utilisation de setAuthState dans le composant Connecter :
            Dans votre composant Connecter, vous pouvez maintenant utiliser setAuthState pour modifier l'état d'authentification globale. Par exemple, après une connexion réussie, vous pourriez appeler setAuthState({ ... }) pour mettre à jour l'état global, reflétant ainsi que l'utilisateur est maintenant authentifié.

17. Maintenant quand je rafraichie les deux liens reaparaisse. Parce que lorsque je rafraichie la page, le useState est de base initialiser a false
        1. Dans le useEffect, on vas verifier si il y a un token si oui on vas setAuthState(true)

18.Comment faire pour ne pas accepter de fakeToken
        1. Dans notre routes "Users.js" on vas cree une nouvelle route pour verifier si la methode validateToken retourne un user.
        2. Ensuite dans "App.js" on vas prendre le accesToken et on vas verifier si la reponse donner par la route recuperer grace a 
        Axios est egale a une error. Si oui on set la methode authState a false si il n'y a pas d'erreur on la set a true.

19. Comment faire le boutton logout
        1. On vas rajouter un boutton dans la bar de navigation. On vas rajouter un point d'interogation et un else qui vas permettre
        de voir si il y a un utilisateur qui est connecté. Si oui on vas faire apparaitre le boutton logout.
        2. Dans le boutton on vas faire l'utilisation d'une methode qui vas retirer l'iteme que le donne comme argument. Dans ce cas ca vas etre ("accesToken")

20. Comment prendre le username de l'utilisateur connecter
        1. On vas faire l'utilisation de la methode que nous avons cree dans la route"User". Methode: "verificationUser"
        2. Ensuite, dans la page App.js, on vas changer le useState. Pour qu'il soit un objet a la place d'un boolean.
        3. Ensuite, dans le setAuthState, on vas mettre l'objet, et si il est connecter on vas mettre le statut a true.
        4. Si l'utilisateur n'est pas connecter, on vas seulement changer le statut pour false

21. Lorsque je click sur logout 
        1. La premiere ligne de la methode vas nous permettre de retirer le token qui est actuellement dans le LocalStorage.
        2. Ensuite, on vas remettre l'objet authState par default.

22. Lorsque je me connecte,l le nom de user n'apparait pas automatiquement, je dois rafraichier la page pour le voir.
        1. Le "setAuthState(true)", il faut le mettre en objet comme dans le logout.
        2. Dans la route "User.js" du cote serveur, a la place de renvoyer seulement un token, on vas renvoyer le nom du user et son id
        3. Ensuite dans l'objet, on vas aller chercher les different champ que nous avons besoin. Exemple: reponse.data.token

23. Comment delete un comment que j'ai écris
        1. Dans la route des reponses, on vas rajouter un route pour delete une reponse.
        2. On vas avoir besoin de l'id de la reponse, et on vas utiliser la methode validateToken pour verifier l'utilisateur.
        C'est seulement la personne qui a ecris la reponse qui peut supprimer le commentaire
        3. Chaque reponse a un id, donc on vas passer le id de la reponse qu'on veut supprimer
        4. On vas utiliser la fonction destroy, pour supprimer la reponse ou "reponseId" au id qui ce trouve dans la table Reponse

24. Comment faire pour que le boutton supprimer s'affiche seulement si la personne qui est connecter est celui qui a ecris la reponse
        1.On vas mettre un boutton dans la liste des questions, comme ca chaque question a un boutton. 
        2. Ensuite on doit prendre le AuthContext et l'utiliser dans la page question.
        La difference avec se cosnnecter c'Est que nous allons seulement prendre la variable authstate et non setAuthState, parce 
        que nous cherchons seulement a avoir les donné qui sont dans authState.
        3. On vas verifier directement avec le boutton si l'utilisateur connecter est celui qui a ecris la reponse, si c'est vrai, on affiche le boutton.
        4. On vas cree la fonction deleteReponse qui vas prendre comme argument un id
        5. On vas utiliser l'appelle de axios.delete pour pouvoir delete la reponse que l'utilisateur connecter a cree

        
        X/HEADERS: headers: { accessToken: localStorage.getItem("accessToken") } : Voici la partie concernant les en-têtes (headers) de la requête.
        En-têtes (Headers) : Les en-têtes dans une requête HTTP sont utilisés pour envoyer des informations supplémentaires au serveur. Dans votre cas, un en-tête nommé accessToken est inclus.
        localStorage.getItem("accessToken") : Cette commande récupère une valeur nommée accessToken stockée dans le localStorage du navigateur. Le localStorage est comme une petite base de données dans le navigateur où vous pouvez stocker des informations.
        accessToken : C'est probablement un jeton (token) utilisé pour l'authentification. Il permet au serveur de savoir qui fait la requête et s'il a la permission de supprimer la réponse. En gros, c'est comme une clé qui prouve que l'utilisateur est bien connecté et autorisé à effectuer cette action.
        



             

        

        